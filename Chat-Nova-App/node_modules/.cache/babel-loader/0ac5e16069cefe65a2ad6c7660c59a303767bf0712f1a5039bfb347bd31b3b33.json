{"ast":null,"code":"var _jsxFileName = \"D:\\\\Gemini App\\\\gemini-clone\\\\src\\\\context\\\\Context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport run from \"../config/gemini\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nconst ContextProvider = props => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [recentPrompt, setRecentPrompt] = useState(\"\");\n  const [prevPrompts, setPrevPrompts] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [resultData, setResultData] = useState(\"\");\n  const delayPara = (index, nextword) => {};\n  const onSent = async prompt => {\n    setResultData(\"\");\n    setLoading(true);\n    setShowResult(true);\n    setRecentPrompt(input);\n    await run(input);\n    const response = await run(input);\n    let responseArray = response.split(\"**\");\n    let newResponse;\n    for (let i = 0; i < responseArray.length; i++) {\n      if (i == 0 || i % 2 !== 1) {\n        newResponse += responseArray[i];\n      } else {\n        newResponse += \"<b>\" + responseArray[i] + \"</b>\";\n      }\n    }\n    let newResponse2 = newResponse.split(\"*\").setResultData(newResponse);\n    setLoading(false);\n    setInput(\"\");\n  };\n  const contextValue = {\n    prevPrompts,\n    setPrevPrompts,\n    onSent,\n    setRecentPrompt,\n    recentPrompt,\n    showResult,\n    input,\n    setInput,\n    resultData,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(ContextProvider, \"HcnTwYbrTsayM1LlF+QRYEeLQnM=\");\n_c = ContextProvider;\nexport default ContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useState","run","jsxDEV","_jsxDEV","Context","ContextProvider","props","_s","input","setInput","recentPrompt","setRecentPrompt","prevPrompts","setPrevPrompts","showResult","setShowResult","loading","setLoading","resultData","setResultData","delayPara","index","nextword","onSent","prompt","response","responseArray","split","newResponse","i","length","newResponse2","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Gemini App/gemini-clone/src/context/Context.jsx"],"sourcesContent":["import { createContext, useState } from \"react\";\r\nimport run from \"../config/gemini\";\r\n\r\nexport const Context = createContext();\r\n\r\n\r\nconst ContextProvider = (props) => {\r\n\r\n    const [input , setInput]= useState(\"\");\r\n    const [recentPrompt, setRecentPrompt] = useState(\"\");\r\n    const [prevPrompts, setPrevPrompts] = useState([]);\r\n    const [showResult, setShowResult] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [resultData, setResultData] = useState(\"\");\r\n\r\n\r\n    const delayPara = (index,nextword) =>{\r\n\r\n\r\n    }\r\n\r\n   \r\n   \r\n    const onSent = async (prompt) =>{\r\n        setResultData(\"\");\r\n        setLoading(true);\r\n        setShowResult(true);\r\n        setRecentPrompt(input);\r\n        await run (input);\r\n        const response = await run (input);\r\n        let responseArray = response.split(\"**\")\r\n        let newResponse;\r\n        for (let i=0; i<responseArray.length; i++){\r\n            if(i==0 || i%2 !==1){\r\n                newResponse +=responseArray[i];\r\n\r\n            }\r\n            else{\r\n                newResponse +=\"<b>\" + responseArray[i] + \"</b>\"\r\n            }\r\n        }\r\n\r\n        let newResponse2 = newResponse.split(\"*\").\r\n\r\n\r\n\r\n        setResultData(newResponse);\r\n        setLoading(false);\r\n        setInput(\"\");\r\n\r\n    }\r\n   \r\n\r\n\r\n    const contextValue = {\r\n        prevPrompts,\r\n        setPrevPrompts,\r\n        onSent,\r\n        setRecentPrompt,\r\n        recentPrompt,\r\n        showResult,\r\n        input,\r\n        setInput,\r\n        resultData,\r\n        loading,\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <Context.Provider value={contextValue}>\r\n            {props.children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\nexport default ContextProvider"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,OAAOC,GAAG,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,OAAO,MAAMC,OAAO,gBAAGL,aAAa,CAAC,CAAC;AAGtC,MAAMM,eAAe,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAE/B,MAAM,CAACC,KAAK,EAAGC,QAAQ,CAAC,GAAET,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAGhD,MAAMoB,SAAS,GAAGA,CAACC,KAAK,EAACC,QAAQ,KAAI,CAGrC,CAAC;EAID,MAAMC,MAAM,GAAG,MAAOC,MAAM,IAAI;IAC5BL,aAAa,CAAC,EAAE,CAAC;IACjBF,UAAU,CAAC,IAAI,CAAC;IAChBF,aAAa,CAAC,IAAI,CAAC;IACnBJ,eAAe,CAACH,KAAK,CAAC;IACtB,MAAMP,GAAG,CAAEO,KAAK,CAAC;IACjB,MAAMiB,QAAQ,GAAG,MAAMxB,GAAG,CAAEO,KAAK,CAAC;IAClC,IAAIkB,aAAa,GAAGD,QAAQ,CAACE,KAAK,CAAC,IAAI,CAAC;IACxC,IAAIC,WAAW;IACf,KAAK,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACH,aAAa,CAACI,MAAM,EAAED,CAAC,EAAE,EAAC;MACtC,IAAGA,CAAC,IAAE,CAAC,IAAIA,CAAC,GAAC,CAAC,KAAI,CAAC,EAAC;QAChBD,WAAW,IAAGF,aAAa,CAACG,CAAC,CAAC;MAElC,CAAC,MACG;QACAD,WAAW,IAAG,KAAK,GAAGF,aAAa,CAACG,CAAC,CAAC,GAAG,MAAM;MACnD;IACJ;IAEA,IAAIE,YAAY,GAAGH,WAAW,CAACD,KAAK,CAAC,GAAG,CAAC,CAIzCR,aAAa,CAACS,WAAW,CAAC;IAC1BX,UAAU,CAAC,KAAK,CAAC;IACjBR,QAAQ,CAAC,EAAE,CAAC;EAEhB,CAAC;EAID,MAAMuB,YAAY,GAAG;IACjBpB,WAAW;IACXC,cAAc;IACdU,MAAM;IACNZ,eAAe;IACfD,YAAY;IACZI,UAAU;IACVN,KAAK;IACLC,QAAQ;IACRS,UAAU;IACVF;EAGJ,CAAC;EAED,oBACIb,OAAA,CAACC,OAAO,CAAC6B,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAG,QAAA,EACjC7B,KAAK,CAAC6B;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAAAhC,EAAA,CApEKF,eAAe;AAAAmC,EAAA,GAAfnC,eAAe;AAsErB,eAAeA,eAAe;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}